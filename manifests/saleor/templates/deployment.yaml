apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: '{{.Release.Name}}-saleor-api'
  # annotations:
  #   "sidecar.jaegertracing.io/inject": "true" 
  labels:
    app: '{{.Release.Name}}-saleor'
    service: '{{.Release.Name}}-saleor-api'
spec:
  replicas: 2
  selector:
    matchLabels:
      app: '{{.Release.Name}}-saleor'
      service: '{{.Release.Name}}-saleor-api'
  serviceName: '{{.Release.Name}}-saleor-api-headless'
  # strategy:
  #   rollingUpdate:
  #     maxSurge: 1
  #     maxUnavailable: 0
  #   type: RollingUpdate
  updateStrategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: '{{.Release.Name}}-saleor'
        service: '{{.Release.Name}}-saleor-api'
    spec:
      restartPolicy: Always
      containers:
        - name: jaeger-agent
          image: jaegertracing/jaeger-agent:1.20.0  # The agent version should match the operator version
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 5775
              name: zk-compact-trft
              protocol: UDP
            - containerPort: 5778
              name: config-rest
              protocol: TCP
            - containerPort: 6831
              name: jg-compact-trft
              protocol: UDP
            - containerPort: 6832
              name: jg-binary-trft
              protocol: UDP
            - containerPort: 14271
              name: admin-http
              protocol: TCP
          env:
            - name: POD_IP
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: status.podIP
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.name
            - name: HOST_IP
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: status.hostIP
          args:
            - --log-level=debug
            - --jaeger.tags=cluster=undefined,deployment.name=myapp,pod.namespace=saleor,pod.name=${POD_NAME:},host.ip=${HOST_IP:},pod.io=${POD_IP:}
            - --processor.jaeger-binary.server-max-packet-size=100000
            - --processor.jaeger-binary.server-queue-size=2000
            - --processor.jaeger-binary.server-socket-buffer-size=16000
            - --processor.jaeger-compact.server-max-packet-size=100000
            - --processor.jaeger-compact.server-queue-size=2000
            - --processor.jaeger-compact.server-socket-buffer-size=16000
            - --reporter.grpc.retry.max=5
            - --reporter.grpc.host-port=dns:///jaeger-collector.default.svc:14250
            - --reporter.type=grpc
            - --reporter.grpc.tls.skip-host-verify=true
        - image: hnminh/saleor-api:kms
          name: saleor-api
          lifecycle:
            postStart:
              exec:
                command: ["/bin/sh", "-c", "sleep 5"]
          imagePullPolicy: Always
          ports:
            - containerPort: 8000
              name: api
            - containerPort: 9191
              name: metrics
          env:
            - name: JAEGER_AGENT_HOST
              value: 'localhost'
            - name: JAEGER_AGENT_PORT
              value: '6831'
            - name: JAEGER_LOGGING
              value: 'True'
            - name: ENABLE_ACCOUNT_CONFIRMATION_BY_EMAIL
              value: '{{ .Values.saleor.confirmationByEmail }}'
            - name: ALLOWED_GRAPHQL_ORIGINS
              value: '*'
            - name: PLAYGROUND_ENABLED
              value: '{{ .Values.saleor.debugToolBar }}'
            - name: ENABLE_DEBUG_TOOLBAR
              value: '{{ .Values.saleor.debugToolBar }}'
            - name: DEBUG
              value: '{{ .Values.saleor.debug }}'
            - name: DATABASE_URL
              value: '{{ .Values.saleor.databaseUrl }}'
            {{ if .Values.redis.enabled }}
            - name: CACHE_URL
              value: 'redis://{{.Release.Name}}-redis-master.{{.Release.Namespace}}:6379/0'
            {{ else }}
            - name: CACHE_URL
              value: '{{ .Values.saleor.redisUrl }}'
            {{ end }}
            - name: ALLOWED_CLIENT_HOSTS
              value: '{{ .Values.saleor.allowHosts }}, {{.Release.Name}}-saleor-dashboard, {{.Release.Name}}-saleor-storefront'
            - name: ALLOWED_HOSTS
              value: '{{ .Values.saleor.allowHosts }}, {{.Release.Name}}-saleor-dashboard, {{.Release.Name}}-saleor-storefront'
            - name: SECRET_KEY
              value: '{{ .Values.saleor.secretKey }}'
            - name: DJANGO_SUPERUSER_PASSWORD
              value: '{{ .Values.saleor.superUserPassword }}'
            - name: DASHBOARD_URL
              value: 'http://{{ .Values.saleor.dashboardIngress }}'
            - name: STOREFRONT_URL
              value: 'http://{{ .Values.saleor.storefrontIngress }}'
          resources:
            limits:
              cpu: '500m'
              memory: '1Gi'
            requests:
              cpu: '500m'
              memory: '1Gi'
          volumeMounts:
            - mountPath: /app/media
              name: media-storage
            - mountPath: /app/static
              name: static-storage
      volumes:
        - name: media-storage
          persistentVolumeClaim:
            claimName: 'storage-{{.Release.Name}}-saleor-media'
        - name: static-storage
          persistentVolumeClaim:
            claimName: 'storage-{{.Release.Name}}-saleor-static'

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: '{{.Release.Name}}-saleor-dashboard'
  labels:
    app: '{{.Release.Name}}-saleor'
    service: '{{.Release.Name}}-saleor-dashboard'
spec:
  replicas: 1
  selector:
    matchLabels:
      app: '{{.Release.Name}}-saleor'
      service: '{{.Release.Name}}-saleor-dashboard'
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: '{{.Release.Name}}-saleor'
        service: '{{.Release.Name}}-saleor-dashboard'
    spec:
      restartPolicy: Always
      containers:
        - image: hnminh/saleor-dashboard:kms
          name: saleor-dashboard
          imagePullPolicy: Always
          # Image with debug mode need to config webpack-dev-server port
          # command: ['/bin/sh']
          # args: ['-c', 'npm start -- --port 80 --host 0.0.0.0 --disable-host-check']
          ports:
            - containerPort: 80
              name: dashboard
          env:
            - name: DANGEROUSLY_DISABLE_HOST_CHECK
              value: 'true'
            - name: API_URI
              value: 'http://{{ .Values.saleor.apiIngress }}/graphql/'
          resources:
            limits:
              cpu: '150m'
              memory: '150Mi'
            requests:
              cpu: '150m'
              memory: '150Mi'
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: '{{.Release.Name}}-saleor-storefront'
  labels:
    app: '{{.Release.Name}}-saleor'
    service: '{{.Release.Name}}-saleor-storefront'
spec:
  replicas: 1
  selector:
    matchLabels:
      app: '{{.Release.Name}}-saleor'
      service: '{{.Release.Name}}-saleor-storefront'
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: '{{.Release.Name}}-saleor'
        service: '{{.Release.Name}}-saleor-storefront'
    spec:
      restartPolicy: Always
      containers:
        - image: hnminh/saleor-storefront:kms
          name: saleor-storefront
          imagePullPolicy: Always
          # Image with debug mode need to config webpack-dev-server port
          # command: ['/bin/sh']
          # args: ['-c', 'npm start -- --port 80 --host 0.0.0.0 --disable-host-check']
          ports:
            - containerPort: 80
              name: storefront
          env:
            - name: DANGEROUSLY_DISABLE_HOST_CHECK
              value: 'true'
            - name: API_URI
              value: 'http://{{ .Values.saleor.apiIngress }}/graphql/'
          resources:
            limits:
              cpu: '150m'
              memory: '150Mi'
            requests:
              cpu: '150m'
              memory: '150Mi'